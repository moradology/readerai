[project]
name = "readerai"
version = "0.1.0"
description = "AI-powered reading companion for children"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "dspy>=2.6.27",
    "fastapi>=0.116.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "pytest>=8.4.1",
    "python-dotenv>=1.1.1",
    "uvicorn[standard]>=0.35.0",
]

[tool.setuptools]
packages = ["readerai"]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "ipdb>=0.13.13",
    "ipython>=9.4.0",
    "pytest>=8.4.1",
    "pre-commit>=4.2.0",
]

[project.scripts]
readerai-passages = "readerai.cli.extract_passages:main"
readerai-vocabulary = "readerai.cli.run_vocabulary:main"
readerai-comprehension = "readerai.cli.run_comprehension:main"

[tool.mypy]
python_version = "3.13"
warn_return_any = false  # Initially less strict with 'any' usage
warn_unused_configs = true
disallow_untyped_defs = false  # Start with less strict typing
disallow_incomplete_defs = false
check_untyped_defs = false  # Initially less strict with untyped code
disallow_untyped_decorators = false
no_implicit_optional = false  # Initially less strict
strict_optional = false  # Initially less strict

# Ignore specific errors in the initial phase
[[tool.mypy.overrides]]
module = "main"
ignore_errors = true

[[tool.mypy.overrides]]
module = "readerai.cli.*"
ignore_errors = true

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
]
ignore = [
    "E501",    # line too long (handled by ruff formatter)
    "N802",    # function name should be lowercase (conflicts with some DSPy conventions)
    "N803",    # argument name should be lowercase (conflicts with some DSPy conventions)
    "N806",    # variable in function should be lowercase (conflicts with some DSPy conventions)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected
    "ARG001",  # Unused function argument
]

[tool.bandit]
exclude_dirs = ["tests", "experiments"]
skips = ["B101", "B110"]  # Skip assert warning and try-except-pass in initial phase

[tool.pytest.ini_options]
# Filter out common deprecation warnings from dependencies
filterwarnings = [
    "ignore::DeprecationWarning:pydantic.*:",
    "ignore::DeprecationWarning:importlib.*:",
    "ignore::DeprecationWarning:litellm.*:"
]
